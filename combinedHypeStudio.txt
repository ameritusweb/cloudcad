/** @type { import('@storybook/react-webpack5').StorybookConfig } */
const config = {
  stories: ["../src/**/*.mdx", "../src/**/*.stories.@(js|jsx|mjs|ts|tsx)"],
  addons: [
    "@storybook/preset-create-react-app",
    "@storybook/addon-onboarding",
    "@storybook/addon-links",
    "@storybook/addon-essentials",
    "@chromatic-com/storybook",
    "@storybook/addon-interactions",
    'msw-storybook-addon',
  ],
  framework: {
    name: "@storybook/react-webpack5",
    options: {},
  },
  staticDirs: ["..\\public"],
};
export default config;

/* ================================================================================ */
/** @type { import('@storybook/react').Preview } */
import { initialize, mswLoader } from 'msw-storybook-addon';
import { handlers } from '../src/mocks/handlers';

// Initialize MSW
initialize();

export const loaders = [
  mswLoader,
];

export const parameters = {
  actions: { argTypesRegex: "^on[A-Z].*" },
  controls: {
    matchers: {
      color: /(background|color)$/i,
      date: /Date$/,
    },
  },
  msw: {
    handlers: handlers,
  },
};
/* ================================================================================ */
// config-overrides.js
module.exports = function override(config, env) {
    // Custom overrides here
    return config;
  };
/* ================================================================================ */
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

/* ================================================================================ */
<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><link rel="icon" href="%PUBLIC_URL%/favicon.ico"><meta name="viewport" content="width=device-width,initial-scale=1"><meta name="theme-color" content="#000000"><meta name="description" content="Web site created using create-react-app"><link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png"><link rel="manifest" href="%PUBLIC_URL%/manifest.json"><title>React App</title></head><body><noscript>You need to enable JavaScript to run this app.</noscript><div id="root"></div></body></html>
/* ================================================================================ */
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* ================================================================================ */
import logo from './logo.svg';
import './App.css';
import React, { useState } from 'react';
import { AiOutlineExpand, AiOutlinePlus, AiOutlineImport } from 'react-icons/ai';
import CenterView from './CenterView';
import ProjectsPanel from './ProjectsPanel';
import ImportPanel from './ImportPanel';

const App = () => {
  const [zoom, setZoom] = useState(1);
  const [expanded, setExpanded] = useState(false);
  const [projectsOpen, setProjectsOpen] = useState(false);
  const [importOpen, setImportOpen] = useState(false);

  const handleSliderChange = (e) => {
    setZoom(e.target.value);
  };

  const toggleExpand = () => {
    setExpanded(!expanded);
  };

  const toggleProjects = () => {
    setProjectsOpen(!projectsOpen);
  };

  const toggleImport = () => {
    setImportOpen(!importOpen);
    if (projectsOpen) setProjectsOpen(false);
  };

  return (
    <div className="flex h-screen">
      {!expanded && (
        <div className="bg-black w-16 flex flex-col items-center">
          <button onClick={toggleImport} className="text-gray-200 hover:text-white mt-4 flex flex-col items-center">
            <AiOutlineImport size={24} />
            <span className="text-xs mt-1">Import</span>
          </button>
      </div>
      )}
      {importOpen && !expanded && (
        <ImportPanel />
      )}
      {projectsOpen && !expanded && (
        <ProjectsPanel />
      )}
      <div className="flex flex-col flex-grow">
        {!expanded && (
          <div className="bg-white h-8 p-1 pl-4 border-b border-gray-300">
            <button onClick={toggleProjects} className="font-bold">
              Projects
            </button>
          </div>
        )}
        <div className="flex flex-grow overflow-auto items-center justify-center">
          <CenterView zoom={zoom} />
        </div>
        <div className="bg-white h-8 border-t border-gray-300 flex items-center justify-end">
          <input
            type="range"
            min="1"
            max="3"
            step="0.1"
            value={zoom}
            onChange={handleSliderChange}
            className="mr-4"
          />
          <button onClick={toggleExpand} className="mr-4">
            <AiOutlineExpand size={24} />
          </button>
        </div>
      </div>
    </div>
  );
};

export default App;
/* ================================================================================ */
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

/* ================================================================================ */
import React from 'react';
import HypeStudio from './HypeStudio';

const CenterView = ({ zoom }) => {
  return (
    <div
      className="bg-gray-200 w-[80%] h-[80%] flex items-center justify-center"
      style={{ transform: `scale(${zoom})` }}
    >
      <HypeStudio />
    </div>
  );
};

export default CenterView;

/* ================================================================================ */
import React, { useState, useEffect } from 'react';
import { Header } from './stories/Header';
import { Toolbar } from './stories/Toolbar';
import { LeftPanel } from './stories/LeftPanel';
import { BabylonViewport } from './stories/BabylonViewport';
import { FaSearchPlus, FaHandPaper, FaSyncAlt } from 'react-icons/fa';

const HypeStudio = () => {
  const [activeView, setActiveView] = useState('List View');
  const [leftPanelContent, setLeftPanelContent] = useState([]);
  const [projectInfo, setProjectInfo] = useState({ name: '', dimensions: '' });
  const [currentModelView, setCurrentModelView] = useState('');
  const [controlMode, setControlMode] = useState('rotate');

  useEffect(() => {
    // Fetch project info
    fetch('/api/project')
      .then(res => res.json())
      .then(data => setProjectInfo(data));
    
    // Fetch initial left panel content
    fetchLeftPanelContent('List View');
  }, []);

  const fetchLeftPanelContent = (viewName) => {
    fetch(`/api/${viewName.toLowerCase().replace(' ', '-')}`)
      .then(res => res.json())
      .then(data => setLeftPanelContent(data));
  };

  const handleToolbarClick = (viewName) => {
    setActiveView(viewName);
    fetchLeftPanelContent(viewName);
  };

  const handleViewChange = (newView) => {
    setCurrentModelView(newView);
    console.log(`View changed to ${newView}`);
  };

  const handleControlModeChange = (mode) => {
    setControlMode(mode);
    console.log(`Control mode changed to ${mode}`);
  };

  return (
    <div className="flex flex-col h-full w-full bg-gray-100">
      <Header projectName={projectInfo.name} dimensions={projectInfo.dimensions} />
      <Toolbar activeView={activeView} onItemClick={handleToolbarClick} />
      <div className="flex flex-1">
        <LeftPanel content={leftPanelContent} />
        <div className="flex-1 relative">
          <BabylonViewport currentModelView={currentModelView} onViewChange={handleViewChange} controlMode={controlMode} />
          <div className="absolute top-2 right-2 text-white bg-black bg-opacity-50 p-2 rounded">
            Current View: {currentModelView}
          </div>
          <div className="absolute bottom-2 right-2 flex space-x-2">
            <button 
              onClick={() => handleControlModeChange('zoom')}
              className={`p-2 rounded ${controlMode === 'zoom' ? 'bg-blue-500' : 'bg-gray-500'} text-white`}
            >
              <FaSearchPlus />
            </button>
            <button 
              onClick={() => handleControlModeChange('pan')}
              className={`p-2 rounded ${controlMode === 'pan' ? 'bg-blue-500' : 'bg-gray-500'} text-white`}
            >
              <FaHandPaper />
            </button>
            <button 
              onClick={() => handleControlModeChange('rotate')}
              className={`p-2 rounded ${controlMode === 'rotate' ? 'bg-blue-500' : 'bg-gray-500'} text-white`}
            >
              <FaSyncAlt />
            </button>
          </div>
        </div>
      </div>
      <img src="/images/banner.png" alt="Banner" className="w-48 absolute bottom-2 left-2" />
    </div>
  );
};

export default HypeStudio;
/* ================================================================================ */
import React from 'react';
import { HypeStudio } from './HypeStudio';
import { handlers } from './mocks/handlers';

export default {
  title: 'HypeStudio',
  component: HypeStudio,
  parameters: {
    msw: {
      handlers: handlers,
    },
  },
};

const Template = (args) => <HypeStudio {...args} />;

export const Default = Template.bind({});
Default.args = {};
/* ================================================================================ */
import React from 'react';
import { AiOutlinePlus } from 'react-icons/ai';

const ImportPanel = () => {
  return (
    <div className="bg-black w-32 border-r border-gray-300">
      <div className="flex items-center justify-between p-2 border-b border-gray-300 text-white">
        <span>Import</span>
        <AiOutlinePlus size={24} />
      </div>
    </div>
  );
};

export default ImportPanel;

/* ================================================================================ */
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

/* ================================================================================ */
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

// src/index.js
if (process.env.NODE_ENV === 'development') {
  const { worker } = require('./mocks/browser');
  worker.start();
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

/* ================================================================================ */
// src/mocks/browser.js
import { setupWorker } from 'msw/browser';
import { handlers } from './handlers';

export const worker = setupWorker(...handlers);

/* ================================================================================ */
import { http, HttpResponse } from 'msw';

export const handlers = [
  http.get('/api/project', () => {
    return HttpResponse.json({
      name: 'My Project',
      dimensions: '20mm x 40mm x 60mm'
    }, { status: 200 });
  }),

  http.get('/api/list-view', () => {
    return HttpResponse.json(
      ['Sketch1', 'Sketch2', 'Fillet1', 'Sketch3'],
      { status: 200 }
    );
  }),

  http.get('/api/sketch-view', () => {
    return HttpResponse.json(
      ['New Sketch', 'Edit Sketch', 'Delete Sketch'],
      { status: 200 }
    );
  }),

  http.get('/api/extrude-view', () => {
    return HttpResponse.json(
      ['Extrude1', 'Extrude2', 'New Extrude'],
      { status: 200 }
    );
  }),

  http.get('/api/import-export-view', () => {
    return HttpResponse.json(
      ['Import CAD', 'Export STL', 'Export OBJ'],
      { status: 200 }
    );
  }),

  http.get('/api/fillet-chamfer-view', () => {
    return HttpResponse.json(
      ['Fillet1', 'Chamfer1', 'New Fillet/Chamfer'],
      { status: 200 }
    );
  }),

  http.get('/api/dimension-tool-view', () => {
    return HttpResponse.json(
      ['Dimension1', 'Dimension2', 'Add Dimension'],
      { status: 200 }
    );
  }),
];
/* ================================================================================ */
import React from 'react';
import { AiOutlinePlus } from 'react-icons/ai';

const ProjectsPanel = () => {
  return (
    <div className="bg-white w-32 border-r border-gray-300">
      <div className="flex items-center justify-between p-2 border-b border-gray-300">
        <span>Projects</span>
        <AiOutlinePlus size={24} />
      </div>
    </div>
  );
};

export default ProjectsPanel;

/* ================================================================================ */
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

/* ================================================================================ */
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

/* ================================================================================ */
import React, { useEffect, useRef, useState } from 'react';
import { 
  Engine, Scene, ArcRotateCamera, Vector3, HemisphericLight, MeshBuilder,
  StandardMaterial, Color3, PointerEventTypes
} from '@babylonjs/core';
import { Button, Rectangle, AdvancedDynamicTexture, Control } from '@babylonjs/gui';

export const BabylonViewport = ({ currentModelView, onViewChange, controlMode }) => {
  const canvasRef = useRef(null);
  const sceneRef = useRef(null);
  const boxRef = useRef(null);
  const cameraRef = useRef(null);
  const [currentView, setCurrentView] = useState('Front');

  useEffect(() => {
    const canvas = canvasRef.current;
    const engine = new Engine(canvas, true);
    const scene = new Scene(engine);
    sceneRef.current = scene;

    // Camera
    const camera = new ArcRotateCamera("camera1", Math.PI / 2, Math.PI / 2, 10, Vector3.Zero(), scene);
    camera.attachControl(canvas, true);
    cameraRef.current = camera;

    // Light
    new HemisphericLight("light", new Vector3(0, 1, 0), scene);

    // Main box
    const box = MeshBuilder.CreateBox("box", { size: 2 }, scene);
    const boxMaterial = new StandardMaterial("boxMaterial", scene);
    boxMaterial.diffuseColor = new Color3(0.4, 0.4, 0.4);
    box.material = boxMaterial;
    boxRef.current = box;

    // Wireframe cube
    createWireframeCube(scene, (normal) => {
      const newView = getViewFromNormal(normal);
      console.log("New view:", newView);  // Debug log
      setCurrentView(newView);
      onViewChange(newView);
    });

    engine.runRenderLoop(() => {
      scene.render();
    });

    if (currentModelView === '') {
        onViewChange('Front');
    }

    return () => {
      engine.dispose();
    };
  }, [onViewChange]);

  useEffect(() => {
    if (cameraRef.current) {
      updateCameraPosition(currentView);
    }
  }, [currentView]);

  useEffect(() => {
    if (cameraRef.current && sceneRef.current) {
      updateCameraControls();
    }
  }, [controlMode]);

  const updateCameraControls = () => {
    const camera = cameraRef.current;
    const scene = sceneRef.current;
    
    // Reset all camera controls
    camera.inputs.clear();

    switch (controlMode) {
      case 'zoom':
        camera.inputs.addMouseWheel();
        break;
      case 'pan':
        camera.inputs.addPointers();
        camera.panningSensibility = 50;
        camera.inputs.attached.pointers.buttons = [1]; // Middle mouse button
        break;
      case 'rotate':
      default:
        camera.inputs.addMouseWheel();
        camera.inputs.addPointers();
        camera.inputs.attached.pointers.buttons = [0, 1]; // Left and middle mouse buttons
        break;
    }

    // Prevent default behavior for right-click
    scene.onPointerDown = (evt) => {
        if (evt.button === 2) {
          evt.preventDefault();
        }
      };
}

  useEffect(() => {
    if (cameraRef.current && sceneRef.current) {
      const camera = cameraRef.current;
      const scene = sceneRef.current;
      
      // Reset all camera controls
      camera.inputs.clear();

      switch (controlMode) {
        case 'zoom':
          camera.inputs.addMouseWheel();
          break;
        case 'pan':
          camera.inputs.addPointers();
          camera.panningSensibility = 50;
          camera.inputs.attached.pointers.buttons = [1]; // Middle mouse button
          break;
        case 'rotate':
          camera.inputs.addPointers();
          camera.inputs.attached.pointers.buttons = [0, 1]; // Left and middle mouse buttons
          break;
        default:
          break;
      }

      // Prevent default behavior for right-click
      scene.onPointerDown = (evt) => {
        if (evt.button === 2) {
          evt.preventDefault();
        }
      };
    }
  }, [controlMode]);

  const createWireframeCube = (scene, onFaceClick) => {
    const advancedTexture = AdvancedDynamicTexture.CreateFullscreenUI("UI");
    
    const button = Button.CreateImageOnlyButton("wireframeButton", "data:image/svg+xml;base64," + btoa(`
      <svg width="100" height="100" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
        <path d="M20 80 L80 80 L80 20 L20 20 Z" fill="none" stroke="white" stroke-width="2"/>
        <path d="M20 20 L35 5 L95 5 L80 20" fill="none" stroke="white" stroke-width="2"/>
        <path d="M80 80 L95 65 L95 5" fill="none" stroke="white" stroke-width="2"/>
        <path d="M20 80 L35 65 L95 65" fill="none" stroke="white" stroke-width="2"/>
        <path d="M35 5 L35 65" fill="none" stroke="white" stroke-width="2"/>
      </svg>
    `));

    button.width = "100px";
    button.height = "100px";
    button.horizontalAlignment = Control.HORIZONTAL_ALIGNMENT_RIGHT;
    button.verticalAlignment = Control.VERTICAL_ALIGNMENT_TOP;
    button.top = "60px";
    button.left = "-10px";
    
    button.onPointerUpObservable.add((eventData) => {
      const buttonRect = button._currentMeasure;
      const screenWidth = scene.getEngine().getRenderWidth();
      const screenHeight = scene.getEngine().getRenderHeight();

      const buttonLeft = screenWidth - parseFloat(button.width) + parseFloat(button.left);
      const buttonTop = parseFloat(button.top);

      const relativeX = eventData.x - buttonLeft;
      const relativeY = eventData.y - buttonTop;

      const normalizedX = relativeX / parseFloat(button.width);
      const normalizedY = relativeY / parseFloat(button.height);

      console.log("Normalized click position:", normalizedX, normalizedY);  // Debug log

      if (normalizedX >= 0 && normalizedX <= 1 && normalizedY >= 0 && normalizedY <= 1) {
        const face = determineFaceClicked(normalizedX, normalizedY);
        console.log("Clicked face:", face);  // Debug log

        const normal = getFaceNormal(face);
        console.log("Face normal:", normal);  // Debug log

        onFaceClick(normal);
      } else {
        console.log("Click outside the button");
      }
    });

    advancedTexture.addControl(button);
  };

  const determineFaceClicked = (normalizedX, normalizedY) => {
    if (normalizedY < 0.2) {
      return normalizedX < 0.6 ? "Top" : "Back";
    } else if (normalizedY > 0.8) {
      return "Bottom";
    } else if (normalizedX < 0.2) {
      return "Left";
    } else if (normalizedX > 0.8) {
      return "Right";
    } else {
      return "Front";
    }
  };

  const getFaceNormal = (face) => {
    switch (face) {
      case "Right": return new Vector3(1, 0, 0);
      case "Left": return new Vector3(-1, 0, 0);
      case "Top": return new Vector3(0, 1, 0);
      case "Bottom": return new Vector3(0, -1, 0);
      case "Front": return new Vector3(0, 0, 1);
      case "Back": return new Vector3(0, 0, -1);
      default: return new Vector3(0, 0, 1);
    }
  };

  const getViewFromNormal = (normal) => {
    if (normal.equalsWithEpsilon(Vector3.Right())) return "Right";
    if (normal.equalsWithEpsilon(Vector3.Left())) return "Left";
    if (normal.equalsWithEpsilon(Vector3.Up())) return "Top";
    if (normal.equalsWithEpsilon(Vector3.Down())) return "Bottom";
    if (normal.equalsWithEpsilon(Vector3.Forward())) return "Front";
    if (normal.equalsWithEpsilon(Vector3.Backward())) return "Back";
    return "Front"; // Default view
  };

  const updateCameraPosition = (view) => {
    const camera = cameraRef.current;
    if (!camera) return;

    console.log("Updating camera position for view:", view);  // Debug log
    
    switch (view) {
      case "Front":
        camera.setPosition(new Vector3(0, 0, -10));
        break;
      case "Back":
        camera.setPosition(new Vector3(0, 0, 10));
        break;
      case "Left":
        camera.setPosition(new Vector3(-10, 0, 0));
        break;
      case "Right":
        camera.setPosition(new Vector3(10, 0, 0));
        break;
      case "Top":
        camera.setPosition(new Vector3(0, 10, 0));
        break;
      case "Bottom":
        camera.setPosition(new Vector3(0, -10, 0));
        break;
      default:
        break;
    }
    camera.setTarget(Vector3.Zero());
  };

  return <canvas ref={canvasRef} style={{ width: '100%', height: '100%' }} />;
};
/* ================================================================================ */
import { fn } from '@storybook/test';
import { BabylonViewport } from './BabylonViewport';

export default {
  title: 'Components/BabylonViewport',
  component: BabylonViewport,
  parameters: {
    layout: 'fullscreen',
  },
  tags: ['autodocs'],
  argTypes: {
    controlMode: {
      control: 'select',
      options: ['zoom', 'pan', 'rotate'],
    },
  },
  args: { onViewChange: fn() },
};

export const Default = {
  args: {
    controlMode: 'rotate',
  },
};

export const ZoomMode = {
  args: {
    controlMode: 'zoom',
  },
};

export const PanMode = {
  args: {
    controlMode: 'pan',
  },
};
/* ================================================================================ */
import React from 'react';
import { FaList } from 'react-icons/fa';

export const Header = ({ projectName, dimensions }) => (
  <header className="bg-blue-600 text-white p-2 flex justify-between items-center">
    <img src="/images/logo.png" alt="HypeStudio Logo" className="h-8" />
    <div className="flex items-center space-x-2">
      <span>{projectName} | {dimensions}</span>
      <button className="bg-blue-500 p-1 rounded">
        <FaList className="text-white" />
      </button>
    </div>
  </header>
);
/* ================================================================================ */
import { fn } from '@storybook/test';
import { Header } from './Header';

export default {
  title: 'Components/Header',
  component: Header,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    projectName: { control: 'text' },
    dimensions: { control: 'text' },
  },
  args: { onMenuClick: fn() },
};

export const Default = {
  args: {
    projectName: 'My Project',
    dimensions: '20mm x 40mm x 60mm',
  },
};

export const LongProjectName = {
  args: {
    projectName: 'Very Long Project Name That Might Overflow',
    dimensions: '20mm x 40mm x 60mm',
  },
};
/* ================================================================================ */
import React from 'react';

export const LeftPanel = ({ content }) => (
  <div className="w-48 bg-white p-2 overflow-y-auto">
    <ul>
      {content.map((item, index) => (
        <li key={index} className="py-1 cursor-pointer hover:bg-gray-100">{item}</li>
      ))}
    </ul>
  </div>
);
/* ================================================================================ */
import { LeftPanel } from './LeftPanel';

export default {
  title: 'Components/LeftPanel',
  component: LeftPanel,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    content: { control: 'array' },
  },
};

export const Default = {
  args: {
    content: ['Sketch1', 'Sketch2', 'Fillet1', 'Sketch3'],
  },
};

export const EmptyPanel = {
  args: {
    content: [],
  },
};

export const LongList = {
  args: {
    content: Array.from({ length: 20 }, (_, i) => `Item ${i + 1}`),
  },
};
/* ================================================================================ */
import React from 'react';
import { FaList, FaPencilAlt, FaCube, FaGlobe, FaDrawPolygon, FaRuler } from 'react-icons/fa';

const toolbarItems = [
  { icon: FaList, name: 'List View' },
  { icon: FaPencilAlt, name: 'Sketch View' },
  { icon: FaCube, name: 'Extrude View' },
  { icon: FaGlobe, name: 'Import/Export View' },
  { icon: FaDrawPolygon, name: 'Fillet/Chamfer View' },
  { icon: FaRuler, name: 'Dimension Tool View' },
];

export const Toolbar = ({ activeView, onItemClick }) => (
  <div className="bg-white p-2 flex space-x-4">
    {toolbarItems.map((item, index) => (
      <button
        key={index}
        onClick={() => onItemClick(item.name)}
        className={`p-2 rounded transition-all duration-200 ease-in-out ${
          activeView === item.name 
            ? 'bg-blue-200 outline outline-2 outline-green-500' 
            : 'hover:bg-blue-100'
        }`}
      >
        <item.icon />
      </button>
    ))}
  </div>
);
/* ================================================================================ */
import { fn } from '@storybook/test';
import { Toolbar } from './Toolbar';

export default {
  title: 'Components/Toolbar',
  component: Toolbar,
  parameters: {
    layout: 'centered',
  },
  tags: ['autodocs'],
  argTypes: {
    activeView: {
      control: 'select',
      options: ['List View', 'Sketch View', 'Extrude View', 'Import/Export View', 'Fillet/Chamfer View', 'Dimension Tool View'],
    },
  },
  args: { onItemClick: fn() },
};

export const Default = {
  args: {
    activeView: 'List View',
  },
};

export const SketchViewActive = {
  args: {
    activeView: 'Sketch View',
  },
};
/* ================================================================================ */
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
