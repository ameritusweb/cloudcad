import os
import subprocess
from .model_manager import ModelManager

class StructuralAnalysis:
    def __init__(self, model_id):
        self.model_manager = ModelManager.get_instance()
        self.model = self.model_manager.get_model(model_id)

    def prepare_inp_file(self, material_properties, loads, constraints):
        # Convert our model to CalculiX input format
        # This is a simplified version and would need to be expanded
        inp_content = "*NODE\n"
        for i, vertex in enumerate(self.model.vertices().vals(), 1):
            inp_content += f"{i}, {vertex.X}, {vertex.Y}, {vertex.Z}\n"

        inp_content += "*ELEMENT, TYPE=C3D8R\n"
        # Add element definitions here

        inp_content += "*MATERIAL, NAME=MATERIAL1\n"
        inp_content += f"*ELASTIC\n{material_properties['young_modulus']}, {material_properties['poisson_ratio']}\n"

        inp_content += "*BOUNDARY\n"
        for constraint in constraints:
            inp_content += f"{constraint['node']}, {constraint['dof']}, {constraint['value']}\n"

        inp_content += "*STEP\n*STATIC\n"
        inp_content += "*CLOAD\n"
        for load in loads:
            inp_content += f"{load['node']}, {load['direction']}, {load['magnitude']}\n"

        inp_content += "*NODE PRINT, NSET=NALL\nU\n*EL PRINT, ELSET=EALL\nS\n*END STEP"

        with open('model.inp', 'w') as f:
            f.write(inp_content)

    def run_analysis(self):
        # Run CalculiX
        subprocess.run(["ccx", "model"])

    def process_results(self):
        # Process the .frd file generated by CalculiX
        # This is a simplified version and would need to be expanded
        results = {}
        with open('model.frd', 'r') as f:
            lines = f.readlines()
            for i, line in enumerate(lines):
                if line.strip().startswith('1PSTRESS'):
                    # Extract stress values
                    stress_values = [float(val) for val in lines[i+1].split()]
                    results[f'node_{i}'] = {
                        'stress': max(stress_values)
                    }
        return results

    def perform_analysis(self, material_properties, loads, constraints):
        self.prepare_inp_file(material_properties, loads, constraints)
        self.run_analysis()
        return self.process_results()